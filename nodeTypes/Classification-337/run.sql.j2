{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Classification == #}
{# == Node Type Description    : This node develops a classification model and uses the same to classify the data == #}

{# Initialize Classification model name #}

{% set source = sources[0] %}
{% set src_node = source.dependencies[0].node %}
{% set analysis_node = sources[1]%}
{% set Classification_name = config.mname %}
{% set ns = namespace(colpredict='',classpredict='')%}
{% set result = ref_no_link(node.location.name, node.name) %}

{%- set nsVariables = namespace(squotes="") -%}


{# Classification table truncated #}

{{ stage('Truncate Classification table') }}

TRUNCATE IF EXISTS {{ this }}

{# Classification model created #}

{{ stage('Classification Model') }}

{% if config.Forcecreate %}

    CREATE OR REPLACE SNOWFLAKE.ML.CLASSIFICATION
     {{ ref_no_link(node.location.name, Classification_name) }}(
    INPUT_DATA => SYSTEM$QUERY_REFERENCE('SELECT
        {%- for col in columns if not (col.predict or col.class) %}
            "{{col.name}}"{%- if not loop.last %}, {%- endif %}
        {%- endfor %}            
        {{ source.join }}'),
    TARGET_COLNAME => '{{ config.tgtcol.name }}' 
     )

{% else %}
            SHOW SNOWFLAKE.ML.CLASSIFICATION LIKE '{{ Classification_name }}' IN SCHEMA {{ result.split('.')[:2]|join('.') }}
{% endif %}

{# Classification data based on the model is inserted into the Classification table. #}

{%- for col in source.columns if col.predict %}

  {%set ns.colpredict = col.name %}
{%endfor%}

{%- for col in source.columns if col.class %}

  {%set ns.classpredict = col.name %}
{%endfor%}


{{ stage('Insert Classification data') }}

    INSERT INTO {{ this }}
    (
        {%- for col in source.columns  %} 
            "{{ col.name }}" 
           {%- if not loop.last %}, {%- endif %}
        {%- endfor %}
    )
	SELECT 
   {%- for col in source.columns  %} 
			
      {%if col.name == ns.classpredict %}
            "{{ns.colpredict}}":class as  "{{col.name}}"
      {%else%}
           "{{col.name}}"
      {%endif%}
            {%- if not loop.last %}, {%- endif %}
    {%- endfor %}
	FROM
	 (SELECT 
        {%- for col in analysis_node.columns %}        
            {%if col.name == ns.colpredict %}
            {{ ref_no_link(node.location.name, Classification_name) }}!predict(
              INPUT_DATA => object_construct(*)) as "{{ns.colpredict}}"
              {%- if not loop.last %}, {%- endif %}
            {%elif col.name == config.tgtcol.name and col.sourceColumns==[{}] %}
              null as "{{col.name}}"{%- if not loop.last %}, {%- endif %}
            {%elif col.name == config.tgtcol.name and col.sourceColumns !=[{}] %}
             "{{col.name}}" as "{{col.name}}"{%- if not loop.last %}, {%- endif %}
            {%elif col.name != config.tgtcol.name and col.name != ns.classpredict %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"{%- if not loop.last %}, {%- endif %}
            {%endif%}
        {%- endfor %}
        {{ analysis_node.join }})



