{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Document AI == #}
{# == Node Type Description    : This node executes Document AI extraction queries on unstructured documents == #}


{% if desiredState %}

    {# Source Object Location and Name #}
	{% set stageStorageLocation =  desiredState.config.stageStorageLocationName | string %}
	{% set stageNameVar =  desiredState.config.stageName | string %}
    {% set refLink = "{{ ref_no_link('" + stageStorageLocation + "', '" + stageNameVar +"') }}" %}

	
    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = desiredState.node.location.name %}
    {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = desiredState.node.name %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '_STREAM'+ '"' %}

    {# Stream Type #}
    {% if  desiredState.config.sourceType == 'Directory Table' %} 
        {% set streamType = 'STAGE' %}
        {% set streamSourceObjectName = desiredState.config.stageName %}
    {% endif %}

{% endif %}

{# Create Stream first #}
{% if desiredState or desiredState == currentState %}

    {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
        {{ stage('Create Stream', true, "sql", "alter") }}
        CREATE OR REPLACE STREAM {{fullyQualifiedStreamName}}
            ON {{ streamType }} {{ refLink }}

    {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
        {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
        CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
            ON {{ streamType }} {{ refLink }}


    {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
        {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
        CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
            ON {{ streamType }} {{ refLink }}


    {% else %}
        {{ stage('Unknown state.', true, "sql", "alter") }}
        select 1 = 0
    {% endif %}


{% elif desiredState == undefined and currentState.storageLocations | length > 0 %}

    {# Source Stream Location and Name #}
    {% set streamTargetLocationName = currentState.node.location.name %}
    {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = currentState.node.name %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

    {{ stage('Drop Stream', true, "sql", "drop") }}
    DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

{%- else -%}

    {{ stage('Unknown state.  Nothing to do.') }}
    select 1 = 0

{% endif %}

{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{# Create Stream first #}
{% elif desiredState %}

    
    {% if desiredState.node.materializationType == 'table' or desiredState.node.materializationType == 'transient table'  %}     

        {% if currentState != undefined and currentState.node.materializationType != desiredState.node.materializationType %}

                {# Change in materialization type #}

                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "create") }}

                 {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                {% endif %}
                 
                {{ stage('Create'+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
               CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                )
               {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                
        {% endif %}

        {% if currentState == undefined or currentState.storageLocations|length == 0 %}
                                  
                      
            {{ stage('Create '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
                CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                (
                    {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    )
                {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
          
        {% elif currentState != undefined and currentState.node.materializationType == desiredState.node.materializationType %}

            {# Change Node Name or Change Storage Location #}
            {# Storage Location Tests #}
            {# Only need to account for updated Storage Location mappings   #}
            
            {# Desired Namespace Variables #}
            {% set nsVariables = namespace(
            colchanges=0,
            storageLocationTest=true) %}
          
           
            {# Test  #}
            {% set nsVariables.storageLocationTest = true %}
            {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}
                
            {#Target location test#}
            {%set currenttargetlocation = currentState.node.location.name %}
            {%set desiredtargetlocation = desiredState.node.location.name %}
     
                {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currenttargetlocation) | map(attribute='database') | first %}
                    {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currenttargetlocation) | map(attribute='schema') | first %}
                  {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                
                  {# Desired mappings #}
                  {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredtargetlocation) | map(attribute='database') | first %}
                  {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredtargetlocation) | map(attribute='schema') | first %}
            
                 {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                {% if currentDatabaseSchema != desiredDatabaseSchema%}
                {% set nsVariables.storageLocationTest = false %}
                 {% endif %}
            

            {# Rename / Move Object #}
            {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name or currentState.node.location.name != desiredState.node.location.name) %}
                {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            {% endif %}

            {# Change table description #}
            {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                 {{ stage('Change table description', true, "sql", "alter") }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                SET COMMENT = '{{ desiredState.node.description | escape }}'
            {% endif %}



            {# Drop Columns #}
            
            {% for dropCurCol in currentState.columns %}
                {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Drop Columns', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        DROP COLUMN 
                    {% else %}
                        , 
                    {% endif %}
                    "{{ dropCurCol.name }}"
                {% endif %}
            {% endfor %}

            {# Add Columns #}
            
            {% for addDesCol in desiredState.columns %}
                {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Add Columns', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        ADD COLUMN
                    {% else %}
                        ,
                    {% endif %}
                        "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                        {%- if not addDesCol.nullable %} NOT NULL
                            {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                {% endif %}
            {% endfor %}

            {# Rename Columns #}
            {% for renameCurCol in currentState.columns %}
                {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                    {% if renameCurCol.name != desiredColumnName %}
                        {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        RENAME COLUMN "{{ renameCurCol.name }}"
                        TO "{{ desiredColumnName }}"
                    {% endif %}
                {% endif %}
            {% endfor %}

            {# Change data types etc #}
            {% set nsVariables.colchanges = 0 %}
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set currentDatatype = alterCurCol.dataType %}
                    {% set currentNullable = alterCurCol.nullable %}
                    {% set currentDefaultValue = alterCurCol.defaultValue %}
                    {% set currentDescription = alterCurCol.description %}

                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                    {% set datatypeTest = currentDatatype == desiredDatatype %}
                    {% set nullableTest = currentNullable == desiredNullable %}
                    {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                    {% set descriptionTest = currentDescription == desiredDescription %}

                    {% if (datatypeTest == false or 
                            nullableTest == false  or
                            defaultValueTest == false or
                            descriptionTest == false) %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                        {% if nsVariables.colchanges == 1 %}
                            {{ stage('Change Column Attributes', true, "sql", "alter") }}
                            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                            MODIFY
                        {% endif %}
                        {% if datatypeTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            SET DATA TYPE {{ desiredDatatype }}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if nullableTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if currentNullable == true %}
                                SET
                            {% else %}
                                DROP
                            {% endif %}
                            NOT NULL
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if descriptionTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            COMMENT '{{ desiredDescription }}'
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        {% if defaultValueTest == false %}
                            {% if nsVariables.colchanges > 1 %},{% endif %}
                            COLUMN "{{ desiredColumnName }}"
                            {% if desiredDefaultValue == '' %}
                                DROP DEFAULT
                            {% else %}
                                SET DEFAULT {{ desiredDefaultValue }}
                            {% endif %}
                            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                        {% endif %}
                        
                    {% else %}
                                            
                    {% endif %}
                {% endif %}
            {% endfor %}
            
            
        {% endif %}


    {% endif %}

{% elif currentState != undefined and desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}

     {{ stage('Drop Table or View', true, "sql", "drop") }}
     DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}
     
       {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% endif %}

{%- else -%}

{{ stage('Nothing to do.') }}
select 1 = 0

{% endif %}

{# Create Task Third #}
{% if desiredState == currentState %}

    {{ stage('No task edits.') }}
    select 1 = 0

{% elif desiredState %}

    
        {% if desiredState.config.devMode == false %}
            
            {# Set Namespace Variables #}
            {% set nsVariables = namespace(taskWhenRun="") %}
            {% set nsVariables = namespace(poll="WHEN ") %}

            {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %}
    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %}
    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

     {# Internal or External Stage locations#}
   {% set stageStorageLocationName = desiredState.config.stageStorageLocationName %}
   {% set dbStage = desiredState.storageLocations | selectattr('name', 'equalto', stageStorageLocationName) | map(attribute='database') | first %}
   {% set schStage = desiredState.storageLocations | selectattr('name', 'equalto', stageStorageLocationName) | map(attribute='schema') | first %}


   {# File name#}
   {%if desiredState.config.fileNames | length > 0 and ',' in desiredState.config.fileNames  %}
    {% set formatted_variable = desiredState.config.fileNames.split(',') | map('string') | join("','") %}
    {% set final_variable = "'" + formatted_variable + "'" %}
    {% set fileNameSQL = 'FILES = (' + final_variable +')' %}

   {%- elif desiredState.config.fileNames | length > 0 %} 
     {% set fileNameSQL = 'FILES = (' + "'"+desiredState.config.fileNames + "'"+')' %}                               
   {%- else -%}
    {% set fileNameSQL = "" %} 
   {% endif %}

   {#Subfolder path #}
   {%set subf = ""%}
   {% set subfolder_value = desiredState.config.subfolder | default('') %}
   {%if desiredState.config.subfolder == "" %}
    {%set subf = "" %}
   {%elif desiredState.config.subfolder == None%}
    {%set subf = "" %}
   {%else%}
    {%set subf = "WHERE RELATIVE_PATH LIKE '"+ subfolder_value +"'"%}
   {%endif%}

   {# Extraction Query Storage Location#}
   {% set extractionQueryStorageLocationName = desiredState.config.extractionQueryStorageLocationName %}
   {% set dbExtractionQuery = desiredState.storageLocations | selectattr('name', 'equalto', extractionQueryStorageLocationName) | map(attribute='database') | first %}
   {% set schExtractionQuery = desiredState.storageLocations | selectattr('name', 'equalto', extractionQueryStorageLocationName) | map(attribute='schema') | first %}


   {# Extraction Query Details #}
   {% set extractionQueryName = desiredState.config.extractionQueryName %}
   {% set extractionQueryVersion = desiredState.config.extractionQueryVersion %}


         {% set tableColumnIds = columns | map(attribute='id') | list %}
         {% set tableColumnNames = columns | map(attribute='name') | list %}


             {% set targetTableName = desiredState.node.name %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

            {# Task Type #}
            {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                    {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                {% else %}
                    {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                {% endif %}
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
            {%- endif -%}

            {# Schedule Type #}
            {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}    
            {%- endif -%}

            {# When Stream has data logic #}
            {# Source Stream Location and Name #}
            {% if desiredState.config.flagSrcStream == true %}
                {%- if nsVariables.poll == 'WHEN ' -%}
                    {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA (\'' + fullyQualifiedStreamName + '\')'  %}
                {%- endif -%}
            {% endif -%}

            {% set tableColumnIds = desiredState.columns | map(attribute='id') | list %}
            {% set tableColumnNames = desiredState.columns | map(attribute='name') | list %}    

            {{ stage('Create Task', true, "sql", "alter") }}
            CREATE OR REPLACE TASK 
                {{ fullyQualifiedTaskName }} 
                {{ taskType}} 
                {{ nsVariables.taskWhenRun }} 
                {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
            AS 
            INSERT INTO {{ fullyQualifiedTargetTableName }}
            SELECT
           {%- for col in desiredState.sources[0].columns %}
              {% if col.extractedData== true or col.name == 'EXTRACTED_DATA' %}
                  "{{ dbExtractionQuery }}"."{{ schExtractionQuery }}"."{{ extractionQueryName }}"!PREDICT(
                  GET_PRESIGNED_URL(@"{{ dbStage }}"."{{ schStage }}".{{ desiredState.config.stageName }}, RELATIVE_PATH), {{ extractionQueryVersion }}) AS "{{ col.name }}"
              {% else %}
                 {{ get_source_transform(col) }} AS "{{ col.name }}" 
              {%endif%}
              {%- if not loop.last -%}, {% endif %}
            {%- endfor %}           
            FROM {{ fullyQualifiedStreamName }}
            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}

        {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                {{ stage('Resume Task', true, "sql", "alter") }}
                ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
            {%- endif -%}
    
            
        {% else %}
            {{ stage('Development Mode - No Task.') }}
            select 1 = 0
            
        {%- endif -%}

{% elif currentState != undefined and desiredState == undefined %}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

    {% if currentState.config.devMode == false %}
        {# FQ Root Task name #}
        {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

        {# Task Info #}
        {% set taskName = currentState.node.name + '_TASK'  %}
        {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

        {{ stage('Drop Current Task', true, "sql", "drop") }}
            DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 

    {%- endif -%}

{%- else -%}

    {{ stage('Nothing to do.') }}
    select 1 = 0

{% endif %}

